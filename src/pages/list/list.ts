import { Block } from '../../core/block';
import template from './list.hbs?raw';
import { Link } from '../../components/link/link';
import { ChatHeader } from '../../components/chat-header/chat-header';
import { Dialog } from '../../components/dialog/dialog';
import { ChatBottom } from '../../components/chat-bottom/chat-bottom.ts';
import { RemoveDialog } from '../../components/remove-dialog/remove-dialog';
import { Input } from "../../components";
import { ValidationRule } from "../../utils/validation.ts";

export class ListPage extends Block {
    constructor(context: any = {}) {
        super({
            ...context
        });
    }

    init() {
        this.children.link = new Link({
            page: 'profile',
            position: 'center',
            style: 'chats',
            name: '–ü—Ä–æ—Ñ–∏–ª—å >'
        });

        this.children.inputSearch = new Input({
            class: '--search',
            label: '',
            name: 'search',
            id: 'search',
            type: 'text',
            placeholder: 'üîçÔ∏é –ü–æ–∏—Å–∫',
            autocomplete: 'search',
            validateRule: 'search' as ValidationRule
        });

        this.setProps({
            contacts: this.props.contacts || []
        });

        this.children.chatHeader = new ChatHeader({
            avatar: 'avatar.png',
            username: '–í–∞–¥–∏–º',
            showActionDialogUser: this.props.showActionDialogUser,
            events: {
                click: (e: Event) => {
                    const target = e.target as HTMLElement;
                    if (target.closest('.dots-button__settings')) {
                        this.toggleActions(e, 'User');
                    } else if (target.closest('.remove-button')) {
                        this.props.openRemoveDialog();
                    }
                }
            }
        });

        this.children.dialogIncoming1 = new Dialog({
            type: 'incoming',
            content: '–ü—Ä–∏–≤–µ—Ç! –°–º–æ—Ç—Ä–∏, —Ç—É—Ç –≤—Å–ø–ª—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫—É—Å–æ–∫ –ª—É–Ω–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ù–ê–°–ê –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –•–∞—Å—Å–µ–ª—å–±–ª–∞–¥ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å SWC –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –Ω–∞ –õ—É–Ω—É. –°–µ–π—á–∞—Å –º—ã –≤—Å–µ –∑–Ω–∞–µ–º —á—Ç–æ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç—ã –ª–µ—Ç–∞–ª–∏ —Å –º–æ–¥–µ–ª—å—é 500 EL ‚Äî –∏ –∫ —Å–ª–æ–≤—É –≥–æ–≤–æ—Ä—è, –≤—Å–µ —Ç—É—à–∫–∏ —ç—Ç–∏—Ö –∫–∞–º–µ—Ä –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –õ—É–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç—ã —Å —Å–æ–±–æ–π –∑–∞–±—Ä–∞–ª–∏ —Ç–æ–ª—å–∫–æ –∫–∞—Å—Å–µ—Ç—ã —Å –ø–ª–µ–Ω–∫–æ–π.',
            time: '11:56'
        });

        this.children.dialogIncoming2 = new Dialog({
            type: 'incoming',
            content: '–•–∞—Å—Å–µ–ª—å–±–ª–∞–¥ –≤ –∏—Ç–æ–≥–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª SWC –¥–ª—è –∫–æ—Å–º–æ—Å–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –Ω–∞ —Ä–∞–∫–µ—Ç—É –æ–Ω–∏ —Ç–∞–∫ –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏. –í—Å–µ–≥–æ –∏—Ö –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ 25 —à—Ç—É–∫, –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ 45000 –µ–≤—Ä–æ.',
            time: '11:56'
        });

        this.children.dialogIncomingImage = new Dialog({
            type: 'incoming',
            Image: true,
            content: 'camera.png',
            time: '11:56'
        });

        this.children.dialogOutgoing = new Dialog({
            type: 'outgoing',
            content: '–ö—Ä—É—Ç–æ!',
            time: '12:00'
        });

        this.children.chatBottom = new ChatBottom({
            showActionDialogMessage: this.props.showActionDialogMessage,
            onSend: (message: string) => {
                console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞", message);
            }
        });

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º RemoveDialog –Ω–∞–ø—Ä—è–º—É—é
        this.children.removeDialog = new RemoveDialog({
            title: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        });
    }

    toggleActions(e: Event, type: string) {
        e.stopPropagation();
        this.setProps({
            [`showActionDialog${type}`]: !this.props[`showActionDialog${type}`]
        });
    }

    protected componentDidUpdate(): boolean {
        (this.children.chatHeader as Block).setProps({
            showActionDialogUser: this.props.showActionDialogUser
        });

        (this.children.message as Block).setProps({
            showActionDialogMessage: this.props.showActionDialogMessage
        });

        return true;
    }

    protected render(): DocumentFragment {
        return this.compile(template, this.props);
    }
}
